<?php

define("NETS_API_BASE_URL",     "https://epayment.nets.eu/Netaxept/");
define("NETS_API_TEST_BASE_URL",     "https://test.epayment.nets.eu/Netaxept/");




class NetsAPIManager  {

    public $root_url = NETS_API_BASE_URL;
    public $test_mode = false;


    public function __construct($test_mode) {
        $this->test_mode = $test_mode;

        $this->root_url = $test_mode ? NETS_API_TEST_BASE_URL : NETS_API_BASE_URL;

    }


    function send_request($request) {

        switch ( get_class($request) ) {
            case 'NetsRegisterRequest': $infix = "Register.aspx"; break;
            case 'NetsProcessRequest':  $infix = "Process.aspx"; break;
            case 'NetsQueryRequest':    $infix = "Query.aspx"; break;
            default:
                #Error
            break;
        }

        $base_url = $this->get_url($infix);

        //Ask request to build its query string
        $query_string = $request->build_query();
        $url = $base_url . "?" . $query_string;

        // Send request; hit API:
        $curl = curl_init();

        curl_setopt($curl, CURLOPT_URL, $url);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        curl_setopt ($curl, CURLOPT_SSLVERSION, 6); // Nets demands this.

        $result = curl_exec($curl);

        if (curl_error($curl)) throw new Exception(curl_error($curl));

        curl_close($curl);

        $data = new SimpleXMLElement($result);



        $array = json_decode( json_encode((array)$data),1);

        if (!function_exists('convert_bool')) {
            function convert_bool(&$item) {
                if ($item == "true") $item = true;
                else if ($item == "false") $item = false;
            }
        }
        array_walk_recursive ($array, 'convert_bool');


        $obj = json_decode( json_encode($array,JSON_NUMERIC_CHECK));

        if (isset($obj->Error)) {
            throw new Exception("From:\n". $url."\n we got: ".$obj->Error->Message);

        }

        return $obj;
    }



    // Helpers ----------------------------------------------

    private function get_url($infix) {
        return $this->root_url . $infix;
    }



}









abstract class NetsRequest {

    public function __construct($data) {
        $data = array_intersect_key($data, array_flip($this->keys));

        // Transform goods object if present
        if ( array_key_exists("goods", $data) && ($goods = $data["goods"]) ) {

            //Set numberOfGoods to length of goods list
            $data["numberOfGoods"] = count($goods);

            $i = 1;
            foreach ($goods as $item) {
                $data["quantity_".$i] = $item["quantity"];
                $data["title_".$i] = $item["title"];
                $data["articleNumber_".$i] = $item["articleNumber"];

                if (array_key_exists("isVatIncluded", $item))   $data["isVatIncluded_".$i]  = var_export($item["isVatIncluded"], true);
                if (array_key_exists("VAT", $item))             $data["VAT_".$i]            = $item["VAT"];

                $data["amount_".$i] = (string)($item["amount"]*100);
                if (array_key_exists("discount", $item)) {
                        $d = $item["discount"];
                        $val = sprintf(round($d, 2) == intval($d) ? "%d" : "%.2f", $d);
                        $data["discount_".$i] = (string)abs($val);
                }

                $i++;
            }

            //Remove original goods object
            unset($data['goods']);
        }





        if (!function_exists('is_not_null')) {
             function is_not_null ($var) { return !is_null($var); }
        }


        $this->data = array_filter($data, 'is_not_null');

    }

    function build_query() {

        $query_string = http_build_query($this->data);

        return $query_string;
    }


}


class NetsRegisterRequest extends NetsRequest {

    public $keys = [
        # AUTH
        "merchantId", #R numeric,max 8
        "token", #R max 32

        # REQUEST
        "serviceType", #O B (nets hosted), M (self hosted), C (call centre), A (no window), max 1
        "transactionId", #O max:32, generated by nets if not supplied
        "transactionReconRef", #O max:32,
        "description", #O max:4000, showed in nets admin

        # ORDER, R
        "orderNumber", #R, max:32 (Warning: different for some banks!)
        "currencyCode", #R, max:32
        "amount", #R, max:10, two leading digits with no comma, ie. 100*real_amount
        "force3DSecure",#O, bool
        "updateStoredPaymentInfo", #O bool, for storing not paying
        "deliveryDate", #O, max: 8 YYYYMMDD, nets auto execute Process(Capture). Use Process(Auth)
        "goods", #O, list of goods, used for invoice

        # ENVIRONMENT, O
        "OS", #O, merchant platform OS
        "environmentLanguage", #O, Programming language for solution

        # TERMINAL, O
        "orderDescription", #O, max:1500, shown to customer in payment window
        "language", #O, no_NO standard, lang for payment window
        "redirectUrl", #O, redirect url..
        "paymentMethodActionList", #O, which methods to show in payment window
        "terminalVat", #O, numeric,max:10, part of amount being VAT
        "autoAuth", #O, false, bool, sends Process(Auth) right away
        "autoSale", #O,false, bool, sends a Process(Sale) right away
        "terminalDesign", #O,true,bool
        "templateData", #O,true, data for given templateData
        "terminalSinglePage", #O, true,bool, single pane window
        "terminalLayout", #O,true, mini layout?

        # CUSTOMER, O, only in nets admin
        "customerNumber",
        "customerEmail",
        "customerPhoneNumber",
        "customerFirstName",
        "customerLastName",
        "customerAddress1",
        "customerAddress2",
        "customerPostcode",
        "customerTown",
        "customerCountry",
        "customerSocialSecurityNumber",
        "customerCompanyName",
        "CompanyRegistrationNumber",
        "customerNotificationMode", # MAIL/EMAIL Klarna invoice or mail

        # CARD INFO, only for service type C
        "pan",
        "expiryDate",
        "securityCode",

        # RECURRING, for subsequent withdrawals
        "recurringType", #R/S
        "recurringFrequency", # in days
        "recurringExpiryDate", # end date YYYMMDD
        "panHash",
        "panHashSecret",

        # AvtaleGiro
        "avtaleGiroKid",
        "avtaleGiroAccountNumber",
        "avtaleGiroCompanyName",
        "avtaleGiroAmountLimit",

        # DnBNorDirectPayment
        "DnBNorDirectPaymentToAccount",
        "DnBNorDirectPaymentKID",
        "DnBNorDirectPaymentMessage",
    ];



}




class NetsProcessRequest extends NetsRequest {
    public $keys = [
        # AUTH
        "merchantId", #R numeric,max 8
        "token", #R max 32
        # PROCESS REQUEST
        "operation", #AUTH,VERIFY,SALE,CAPTURE,CREDIT,ANNUL
        "transactionId", #R, max 32
        "description", #O
        "transactionAmount", #O, max 10
        "transactionReconRef", #O, max32
        "goods", #O
    ];


}



class NetsQueryRequest extends NetsRequest {
    public $keys = [
        # AUTH
        "merchantId", #R numeric,max 8
        "token", #R max 32
        # QUERY REQUEST
        "transactionId", #R, max 32
    ];

}
